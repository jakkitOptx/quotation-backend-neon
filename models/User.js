// User.js
const mongoose = require('mongoose');
const bcrypt = require('bcrypt');

const UserSchema = new mongoose.Schema({
  firstName: { type: String, required: true },
  lastName: { type: String, required: true },
  username: { type: String, required: true, unique: true }, // ‡πÉ‡∏ä‡πâ username ‡πÄ‡∏õ‡πá‡∏ô email
  password: { type: String, required: true },
  level: { type: Number, default: 1 }, // Default level ‡πÄ‡∏õ‡πá‡∏ô 1
  company: { type: String }, // ‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó
  department: { type: String, default: "" }, // ‡πÅ‡∏ú‡∏ô‡∏Å
  position: { type: String, default: "" }, // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
  flow: { type: mongoose.Schema.Types.ObjectId, ref: "ApprovalFlow", default: null }, // Flow ID ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
  role: { type: String, enum: ["admin", "manager", "user"], default: "user" }, // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô employee ‚Üí user
  resetToken: { type: String, default: null }, // üîπ Token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
  resetTokenExpiry: { type: Date, default: null }, // üîπ ‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á token
});

// ‡πÅ‡∏Æ‡∏ä‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
UserSchema.pre("save", async function (next) {
  if (!this.isModified("password")) return next(); // ‚úÖ ‡∏´‡∏¢‡∏∏‡∏î‡∏ñ‡πâ‡∏≤ password ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô

  // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÅ‡∏Æ‡∏ä‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ã‡πâ‡∏≥
  if (this.password.startsWith("$2b$")) {
    console.log("üîπ Password already hashed, skipping hash process.");
    return next();
  }

  const salt = await bcrypt.genSalt(10);
  this.password = await bcrypt.hash(this.password, salt);
  console.log("‚úÖ Password hashed before saving:", this.password);
  next();
});
module.exports = mongoose.model('User', UserSchema);
